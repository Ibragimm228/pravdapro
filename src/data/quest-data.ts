import { Quest, Difficulty, PlayerStats } from "@/types/game";
import { gameData } from "./game-data";

interface QuestTemplate {
  title: string;
  description: string;
  targetValue: number[];
  reward: {
    points: number[];
    xp: number[];
    tempBoost?: {
      type: "XP_BOOST" | "POINT_BOOST";
      durationHours: number;
      multiplier: number;
    };
    badgeId?: string;
    items?: Array<{ itemId: string; quantity: number }>;
  };
  condition: (stats: PlayerStats) => number;
  type: "DAILY_PERSONAL" | "WEEKLY_PERSONAL" | "COMMUNITY_GOAL" | "EVENT_THEMED";
}

export const QUEST_TEMPLATES: Record<string, QuestTemplate[]> = {
  DAILY_PERSONAL: [
    {
      title: "–ú–∞—Å—Ç–µ—Ä –ü—Ä–∞–≤–¥—ã",
      description: "–û—Ç–≤–µ—Ç—å –Ω–∞ {count} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∞–≤–¥—ã",
      targetValue: [3, 5, 7],
      reward: {
        points: [50, 100, 150],
        xp: [100, 200, 300]
      },
      condition: (stats: PlayerStats) => stats.truthsAnswered || 0,
      type: "DAILY_PERSONAL"
    },
    {
      title: "–°–º–µ–ª—å—á–∞–∫",
      description: "–í—ã–ø–æ–ª–Ω–∏ {count} –¥–µ–π—Å—Ç–≤–∏–π",
      targetValue: [3, 5, 7],
      reward: {
        points: [50, 100, 150],
        xp: [100, 200, 300]
      },
      condition: (stats: PlayerStats) => stats.daresCompleted || 0,
      type: "DAILY_PERSONAL"
    },
    {
      title: "–°–µ—Ä–∏–π–Ω—ã–π –ò–≥—Ä–æ–∫",
      description: "–î–æ—Å—Ç–∏–≥–Ω–∏ —Å–µ—Ä–∏–∏ –∏–∑ {count} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
      targetValue: [3, 5, 7],
      reward: {
        points: [75, 150, 250],
        xp: [150, 300, 500],
        tempBoost: { type: "XP_BOOST", durationHours: 1, multiplier: 1.5 }
      },
      condition: (stats: PlayerStats) => stats.currentStreak || 0,
      type: "DAILY_PERSONAL"
    }
  ],
  WEEKLY_PERSONAL: [
    {
      title: "–≠–∫—Å–ø–µ—Ä—Ç –ù–µ–¥–µ–ª–∏",
      description: "–í—ã–ø–æ–ª–Ω–∏ {count} –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å–ª–æ–∂–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
      targetValue: [10, 15, 20],
      reward: {
        points: [300, 500, 750],
        xp: [600, 1000, 1500],
        badgeId: "expert_weekly"
      },
      condition: (stats: PlayerStats) => stats.hardTasksCompleted || 0,
      type: "WEEKLY_PERSONAL"
    },
    {
      title: "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ë–∞–±–æ—á–∫–∞",
      description: "–ü–æ–¥–µ–ª–∏—Å—å {count} –∑–∞–¥–∞–Ω–∏—è–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏",
      targetValue: [5, 10, 15],
      reward: {
        points: [200, 400, 600],
        xp: [400, 800, 1200],
        items: [{ itemId: "skip", quantity: 1 }]
      },
      condition: (stats: PlayerStats) => stats.sharedTasks || 0,
      type: "WEEKLY_PERSONAL"
    }
  ],
  COMMUNITY_GOAL: [
    {
      title: "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –í—ã–∑–æ–≤",
      description: "–í—Å–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å {count} –∑–∞–¥–∞–Ω–∏–π",
      targetValue: [1000, 5000, 10000],
      reward: {
        points: [100, 300, 500],
        xp: [200, 600, 1000],
        badgeId: "community_champion"
      },
      condition: (stats: PlayerStats) => stats.tasksCompleted || 0,
      type: "COMMUNITY_GOAL"
    }
  ]
} as const;

export const BADGES = {
  daily_master: {
    id: "daily_master",
    name: "–ú–∞—Å—Ç–µ—Ä –î–Ω—è",
    description: "–í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã",
    icon: "üåü"
  },
  weekly_champion: {
    id: "weekly_champion",
    name: "–ß–µ–º–ø–∏–æ–Ω –ù–µ–¥–µ–ª–∏",
    description: "–í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã",
    icon: "üèÜ"
  },
  expert_weekly: {
    id: "expert_weekly",
    name: "–≠–∫—Å–ø–µ—Ä—Ç –ù–µ–¥–µ–ª–∏",
    description: "–í—ã–ø–æ–ª–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
    icon: "üëë"
  },
  community_champion: {
    id: "community_champion",
    name: "–ß–µ–º–ø–∏–æ–Ω –°–æ–æ–±—â–µ—Å—Ç–≤–∞",
    description: "–í–Ω–µ—Å–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç",
    icon: "üåç"
  }
};

export function generateDailyQuests(): Quest[] {
  const templates = QUEST_TEMPLATES.DAILY_PERSONAL;
  const quests: Quest[] = [];

  templates.forEach(template => {
    const difficultyIndex = Math.floor(Math.random() * template.targetValue.length);
    const quest: Quest = {
      id: `${template.type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: template.type,
      title: template.title,
      description: template.description.replace("{count}", template.targetValue[difficultyIndex].toString()),
      targetValue: template.targetValue[difficultyIndex],
      currentProgress: 0,
      reward: {
        points: template.reward.points[difficultyIndex],
        xp: template.reward.xp[difficultyIndex],
        tempBoost: template.reward.tempBoost
      },
      isActive: true,
      isCompleted: false,
      startDate: Date.now(),
      endDate: Date.now() + 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞, –∞–∞–≤–æ–∞–æ–≤–æ–∞–≤–æ–∞–≤ –ø–∏–ø–µ—Ü —è —É—Å—Ç–∞–ª —á–∞—Å –Ω–æ—á–∏ —Å—Ç–æ–ª—å–∫–æ –±–∞–≥–æ–≤ —Å—Ç–æ–ª—å–∫–æ –º–æ—Ä–æ–∫–∏. –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç –±—É–¥—Ç–æ –±—ã —Ç–∞–º —á—Ç–æ —Ç–æ –µ—â–µ –∫—Ä–æ–º–µ –æ–¥–Ω–æ–π –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    };
    quests.push(quest);
  });

  return quests;
}

export function generateWeeklyQuests(): Quest[] {
  const templates = QUEST_TEMPLATES.WEEKLY_PERSONAL;
  const quests: Quest[] = [];

  templates.forEach(template => {
    const difficultyIndex = Math.floor(Math.random() * template.targetValue.length);
    const quest: Quest = {
      id: `${template.type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: template.type,
      title: template.title,
      description: template.description.replace("{count}", template.targetValue[difficultyIndex].toString()),
      targetValue: template.targetValue[difficultyIndex],
      currentProgress: 0,
      reward: {
        points: template.reward.points[difficultyIndex],
        xp: template.reward.xp[difficultyIndex],
        badgeId: template.reward.badgeId,
        items: template.reward.items
      },
      isActive: true,
      isCompleted: false,
      startDate: Date.now(),
      endDate: Date.now() + 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω—è
    };
    quests.push(quest);
  });

  return quests;
}

export function generateCommunityQuest(): Quest {
  const templates = QUEST_TEMPLATES.COMMUNITY_GOAL;
  const template = templates[Math.floor(Math.random() * templates.length)];
  const difficultyIndex = Math.floor(Math.random() * template.targetValue.length);

  return {
    id: `${template.type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type: template.type,
    title: template.title,
    description: template.description.replace("{count}", template.targetValue[difficultyIndex].toString()),
    targetValue: template.targetValue[difficultyIndex],
    currentProgress: 0,
    reward: {
      points: template.reward.points[difficultyIndex],
      xp: template.reward.xp[difficultyIndex],
      badgeId: template.reward.badgeId
    },
    isActive: true,
    isCompleted: false,
    startDate: Date.now(),
    endDate: Date.now() + 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω—è
  };
} 